package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"time"
)

func doCianRequests() {
	var reportText strings.Builder

	dateStr := time.Now().Format("02.01.2006")

	reportText.WriteString(fmt.Sprintf("üîµ *–û—Ç—á—ë—Ç Cian* [%s]:\n\n", dateStr))

	for accountName, token := range accounts {
		statusText := doCianRequest(accountName, token)
		reportText.WriteString(statusText + "\n")
	}

	sendMessage(reportText.String())
}

func doCianRequest(accountName, token string) string {
	client := &http.Client{}

	req, err := http.NewRequest("GET", cianURL, nil)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ Cian: %v", err)
		return fmt.Sprintf("‚ùå *Cian %s*: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", accountName)
	}

	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", token))

	resp, err := client.Do(req)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ Cian –¥–ª—è %s: %v", accountName, err)
		return fmt.Sprintf("‚ùå *Cian %s*: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", accountName)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ Cian –¥–ª—è %s: %v", accountName, err)
		return fmt.Sprintf("‚ùå *Cian %s*: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞", accountName)
	}

	var data map[string]interface{}
	if err := json.Unmarshal(body, &data); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON Cian –¥–ª—è %s: %v", accountName, err)
		return fmt.Sprintf("‚ùå *Cian %s*: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", accountName)
	}

	fileBase := strings.ToLower(strings.ReplaceAll(accountName, " ", "_"))

	if resp.StatusCode != 200 {
		msg := fmt.Sprintf("‚ùå *Cian %s*: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–æ–¥ %d)", accountName, resp.StatusCode)
		writeJSONToFile(fmt.Sprintf("%s_response.json", fileBase), data)
		deleteFile(fmt.Sprintf("%s_response.json", fileBase))
		return msg
	}

	offers := extractOffers(data)

	errorsList := filterOffersByKey(offers, "errors")
	warningsList := filterOffersByKey(offers, "warnings")

	var msg string

	if len(errorsList) == 0 && len(warningsList) == 0 {
		msg = fmt.Sprintf("‚úÖ *Cian %s*: –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", accountName)
	} else {
		if len(errorsList) > 0 {
			msg += fmt.Sprintf("üö´ %d –æ—à–∏–±–æ–∫", len(errorsList))

			errFile := fmt.Sprintf("%s_errors.json", fileBase)
			writeJSONToFile(errFile, errorsList)
			deleteFile(errFile)
		}
		if len(warningsList) > 0 {
			if len(msg) > 0 {
				msg += ", "
			}
			msg += fmt.Sprintf("‚ö†Ô∏è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", len(warningsList))

			warnFile := fmt.Sprintf("%s_warnings.json", fileBase)
			writeJSONToFile(warnFile, warningsList)
			deleteFile(warnFile)
		}

		msg = fmt.Sprintf("üö´ *Cian %s*: %s", accountName, msg)
	}

	deleteFile(fmt.Sprintf("%s_response.json", fileBase))

	return msg
}